import java.util.*;

class Stock {
    String symbol;
    double price;

    Stock(String symbol, double price) {
        this.symbol = symbol;
        this.price = price;
    }
}

class Portfolio {
    Map<String, Integer> holdings = new HashMap<>();
    List<String> tradeHistory = new ArrayList<>();

    void buyStock(String symbol, int quantity, double price) {
        holdings.put(symbol, holdings.getOrDefault(symbol, 0) + quantity);
        tradeHistory.add("Bought " + quantity + " shares of " + symbol + " @ $" + price);
    }

    void sellStock(String symbol, int quantity, double price) {
        int currentHoldings = holdings.getOrDefault(symbol, 0);
        if (currentHoldings < quantity) {
            System.out.println("Not enough shares to sell.");
            return;
        }
        holdings.put(symbol, currentHoldings - quantity);
        tradeHistory.add("Sold " + quantity + " shares of " + symbol + " @ $" + price);
    }

    double getPortfolioValue(Map<String, Stock> market) {
        return holdings.entrySet().stream()
                .mapToDouble(entry -> entry.getValue() * market.get(entry.getKey()).price)
                .sum();
    }

    void displayPortfolio(Map<String, Stock> market) {
        System.out.println("Current Portfolio:");
        holdings.forEach((symbol, quantity) -> 
            System.out.println(symbol + ": " + quantity + " shares @ $" + market.get(symbol).price + " each")
        );
        System.out.println("Total Portfolio Value: $" + getPortfolioValue(market));
    }

    void displayTradeHistory() {
        System.out.println("Trade History:");
        tradeHistory.forEach(System.out::println);
    }
}

public class StockTradingPlatform {
    static Map<String, Stock> market = new HashMap<>();
    static Portfolio portfolio = new Portfolio();
    static Random random = new Random();

    public static void main(String[] args) {
        initializeMarketData();
        Scanner scanner = new Scanner(System.in);
        while (true) {
            System.out.println("\n1. View Market Data 2. Buy Stock 3. Sell Stock 4. View Portfolio 5. View Trade History 6. Exit");
            int choice = scanner.nextInt();
            scanner.nextLine();  // Consume newline
            switch (choice) {
                case 1: viewMarketData(); break;
                case 2: buyStock(scanner); break;
                case 3: sellStock(scanner); break;
                case 4: portfolio.displayPortfolio(market); break;
                case 5: portfolio.displayTradeHistory(); break;
                case 6: System.exit(0); break;
                default: System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    static void initializeMarketData() {
        market.put("AAPL", new Stock("AAPL", 150.0));
        market.put("GOOGL", new Stock("GOOGL", 2800.0));
        market.put("AMZN", new Stock("AMZN", 3400.0));
        market.put("MSFT", new Stock("MSFT", 300.0));
    }

    static void viewMarketData() {
        System.out.println("Current Market Data:");
        market.forEach((symbol, stock) -> 
            System.out.println(stock.symbol + ": $" + stock.price)
        );
    }

    static void buyStock(Scanner scanner) {
        System.out.print("Enter stock symbol to buy: ");
        String symbol = scanner.nextLine().toUpperCase();
        Stock stock = market.get(symbol);
        if (stock == null) {
            System.out.println("Invalid stock symbol.");
            return;
        }
        System.out.print("Enter quantity to buy: ");
        int quantity = scanner.nextInt();
        portfolio.buyStock(symbol, quantity, stock.price);
    }

    static void sellStock(Scanner scanner) {
        System.out.print("Enter stock symbol to sell: ");
        String symbol = scanner.nextLine().toUpperCase();
        Stock stock = market.get(symbol);
        if (stock == null) {
            System.out.println("Invalid stock symbol.");
            return;
        }
        System.out.print("Enter quantity to sell: ");
        int quantity = scanner.nextInt();
        portfolio.sellStock(symbol, quantity, stock.price);
    }
}
